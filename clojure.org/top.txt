■ http://clojure.org/

Clojure is a dynamic programming language that targets the Java Virtual Machine (and the CLR, and JavaScript).	→	Clojureは、Java仮想マシン（そして、CLRとJavaScript）を目標とするダイナミックなプログラミング言語です。
It is designed to be a general-purpose language, combining the approachability and interactive development of a scripting language with an efficient and robust infrastructure for multithreaded programming.	→	それは多目的言語であるように設計されています。そして、マルチスレッドのプログラミングのために近づきやすさとスクリプト言語のインタラクティブ発達を効率的で強力な基盤と結合します。
Clojure is a compiled language - it compiles directly to JVM bytecode, yet remains completely dynamic.	→	Clojureは編集された言語です－それはJVMに直接バイトコードを編集するが、完全にダイナミックなままです。
Every feature supported by Clojure is supported at runtime.	→	Clojureで支えられるあらゆる特徴は、実行時で支えられます。
Clojure provides easy access to the Java frameworks, with optional type hints and type inference, to ensure that calls to Java can avoid reflection.	→	Javaへの呼び出しが反射を避けることができることを確実とするために、Clojureは、オプションのタイプ・ヒントとタイプ推論で、簡単なアクセスをJavaフレームワークに提供します。
Clojure is a dialect of Lisp, and shares with Lisp the code-as-data philosophy and a powerful macro system.	→	ClojureはLISPの方言で、データとしてのコード哲学と強力なマクロ・システムをLISPと共有します。
Clojure is predominantly a functional programming language, and features a rich set of immutable, persistent data structures.	→	Clojureは主に関数型言語で、不変の、持続的なデータ構造の豊かなセットを特徴とします。
When mutable state is needed, Clojure offers a software transactional memory system and reactive Agent system that ensure clean, correct, multithreaded designs.	→	変わりやすい州が必要であるとき、Clojureはきれいな、正しい、マルチスレッドのデザインを確実にするソフトウェア処理のメモリ・システムと反応Agentシステムを提供します。
I hope you find Clojure's combination of facilities elegant, powerful, practical and fun to use.	→	あなたが、強力で、エレガントな施設のClojureの組合せが実際的であるとわかって、使用にふざけることを、私は望みます。
The primary forum for discussing Clojure is the Google Group - please join us!	→	Clojureを議論するための主要なフォーラムはGoogleグループです－我々に加わってください！
Rich Hickey	→	豊かなヒッキー
CTO Cognitect, providers of enterprise support for Clojure	→	CTO Cognitect、Clojureに対する企業支持の提供者。

